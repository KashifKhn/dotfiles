{"ref":"48f5eb7a-c420-427e-b293-4292d91af977","syncData":{"version":1,"machineId":"3d936b4a-eaf6-4499-8297-4f22ce7398da","content":"{\"jsx.json\":\"{\\n\\t// Place your snippets for jsx here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t// for console.log\\n\\t\\\"console.log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.warn\\n\\t\\\"console.warn\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cw\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.warn('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.error\\n\\t\\\"console.error\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ce\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.error('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for UseState\\n\\t\\\"UseState\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ust\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});\\\",\\n\\t\\t\\t\\\"$3\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"useState\\\"\\n\\t},\\n\\n\\t//  for UseEffect\\n}\",\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"console.log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.warn\\n\\t\\\"console.warn\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cw\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.warn('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.error\\n\\t\\\"console.error\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ce\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.error('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for UseState\\n\\t\\\"UseState\\\": {\\n\\t\\t\\\"prefix\\\": \\\"us\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});\\\",\\n\\t\\t\\t\\\"$3\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"useState\\\"\\n\\t},\\n}\",\"javascript.json\":\"{\\n\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"console.log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log($1)\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.warn\\n\\t\\\"console.warn\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cw\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.warn('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for console.error\\n\\t\\\"console.error\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ce\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.error('$1');\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\t//  for UseState\\n\\t\\\"UseState\\\": {\\n\\t\\t\\\"prefix\\\": \\\"us\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});\\\",\\n\\t\\t\\t\\\"$3\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"useState\\\"\\n\\t},\\n\\n\\t// for express\\n\\t\\\"express\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ex\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"const express = require('express');\\\",\\n\\t\\t\\t\\\"const app = express();\\\",\\n\\t\\t\\t\\\"const PORT = 3000\\\"\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.use(express.urlencoded({ extended: true }));\\\"\\n\\t\\t\\t\\\"app.use(express.json());\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\",\\n\\n\\t\\t\\t\\\"app.get('/', (req, res) => {\\\",\\n\\t\\t\\t\\\"    res.send('I am root :GET');\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.post('/', (req, res) => {\\\",\\n\\t\\t\\t\\\"    res.send('Got a POST request');\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\n\\t\\t\\t\\\"$2\\\"\\n\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.listen(PORT, () => {\\\",\\n\\t\\t\\t\\\"    console.log(`Server is running on http://localhost:${ PORT }`);\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"express\\\"\\n\\t},\\n// express with mongoose\\n\\t\\\"express with mongoose\\\": {\\n\\t\\t\\\"prefix\\\": \\\"exm\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"const express = require('express');\\\",\\n\\t\\t\\t\\\"const mongoose = require('mongoose');\\\",\\n\\t\\t\\t\\\"const app = express();\\\",\\n\\t\\t\\t\\\"const PORT = 3000\\\"\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"main()\\\"\\n\\t\\t\\t\\\".then(() => console.log('MongoDB Connected...'))\\\",\\n\\t\\t\\t\\\".catch(err => console.log(err));\\\",\\n\\\"\\\",\\n\\t\\t\\t\\\"async function main() {\\\",\\n\\t\\t\\t\\\"    await mongoose.connect('mongodb://127.0.0.1:27017/${1:database}')\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.use(express.urlencoded({ extended: true }));\\\"\\n\\t\\t\\t\\\"app.use(express.json());\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\",\\n\\n\\t\\t\\t\\\"app.get('/', (req, res) => {\\\",\\n\\t\\t\\t\\\"    res.send('I am Root for GET');\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.post('/', (req, res) => {\\\",\\n\\t\\t\\t\\\"    res.send('Got a POST request');\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\n\\t\\t\\t\\\"$2\\\"\\n\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"app.listen(PORT, () => {\\\",\\n\\t\\t\\t\\\"    console.log(`Server is running on http://localhost:${ PORT }`);\\\",\\n\\t\\t\\t\\\"});\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"express with mongoose\\\"\\n\\t},\\n\\n\\n\\n\\t// for try cathc\\n\\t\\\"try catch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"tc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"try {\\\",\\n\\t\\t\\t\\\"    $1\\\",\\n\\t\\t\\t\\\"} catch (error) {\\\",\\n\\t\\t\\t\\\"    console.log(error);\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"try catch\\\"\\n\\t},\\n\\t\\n}\",\"typescript.json\":\"{\\n\\t// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t// for console.log cl\\n\\t\\\"console.log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log($1);\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n\\n\\n}\",\"typescriptreact.json\":\"{\\n\\t// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t// for console.log cl\\n\\t\\\"console.log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cl\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"console.log($1);\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t},\\n}\"}"}}